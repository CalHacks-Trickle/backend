#!/usr/bin/env node

var app = require('../app');
var debug = require('debug')('trickle-backend:server');
var http = require('http');
const { Server } = require("socket.io");
const jwt = require('jsonwebtoken');

const liveSessions = require('../state/live-sessions');
const { buildStatusPayload } = require('../services/state.service.js');
const { classifyApp } = require('../services/groq.service.js');
const AppClassification = require('../models/app-classification.model.js');
const DailyUsage = require('../models/daily-usage.model.js');
const { scheduleDailyJob } = require('../jobs/daily-aggregation.js');

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);
var server = http.createServer(app);
const io = new Server(server, { cors: { origin: "*" } });

io.use((socket, next) => {
  const token = socket.handshake.auth.token;
  if (!token) {
    return next(new Error('Authentication error: Token not provided'));
  }
  jwt.verify(token, process.env.JWT_SECRET, (err, decoded) => {
    if (err) {
      return next(new Error('Authentication error: Invalid token'));
    }
    socket.user = decoded.user;
    next();
  });
});

io.on('connection', (socket) => {
  console.log(`User connected: ${socket.user.email}`);

  const statusInterval = setInterval(async () => {
    const liveSession = liveSessions.get(socket.user.email);
    const classification = liveSession ? liveSession.classification : 'distracting';
    const payload = await buildStatusPayload(socket.user.email, classification);
    socket.emit('status-updated', payload);
  }, 300000);

  socket.on('update-app', async (data) => {
    try {
      if (data && data.appName) {
        // --- Step 1: Handle the PREVIOUS session ---
        const previousSession = liveSessions.get(socket.user.email);
        if (previousSession) {
            const durationInSeconds = Math.round((new Date() - previousSession.startTime) / 1000);
            if (durationInSeconds > 0) {
                await DailyUsage.add(
                    socket.user.email,
                    previousSession.appName, // Explicitly use previous app's name
                    previousSession.classification,
                    durationInSeconds
                );
                console.log(`Recorded ${durationInSeconds}s for previous app: ${previousSession.appName}`);
            }
        }

        // --- Step 2: Set up the NEW session ---
        const newAppName = data.appName;
        let newClassification = await AppClassification.get(newAppName);

        if (!newClassification) {
            newClassification = await classifyApp(newAppName);
            await AppClassification.save(newAppName, newClassification);
        }

        liveSessions.set(socket.user.email, { 
            appName: newAppName, 
            classification: newClassification, 
            startTime: new Date() 
        });
        
        // --- Step 3: Send updated payload ---
        const payload = await buildStatusPayload(socket.user.email, newClassification);
        socket.emit('status-updated', payload);
      }
    } catch (error) {
        console.error("[WebSocket Error] Failed to process 'update-app' event:", error);
    }
  });

  socket.on('disconnect', async () => {
    console.log(`User disconnected: ${socket.user.email}`);
    const lastSession = liveSessions.get(socket.user.email);
    if (lastSession) {
        const durationInSeconds = Math.round((new Date() - lastSession.startTime) / 1000);
        if (durationInSeconds > 0) {
            await DailyUsage.add(
                socket.user.email,
                lastSession.appName,
                lastSession.classification,
                durationInSeconds
            );
            console.log(`Recorded final ${durationInSeconds}s for ${lastSession.appName}`);
        }
    }
    liveSessions.delete(socket.user.email);
    clearInterval(statusInterval);
  });
});

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);
scheduleDailyJob();

function normalizePort(val) {
  var port = parseInt(val, 10);
  if (isNaN(port)) { return val; }
  if (port >= 0) { return port; }
  return false;
}

function onError(error) {
  if (error.syscall !== 'listen') { throw error; }
  var bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
