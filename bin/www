#!/usr/bin/env node

/**
 * Module dependencies.
 */
var app = require('../app');
var debug = require('debug')('trickle-backend:server');
var http = require('http');
const { Server } = require("socket.io");
const jwt = require('jsonwebtoken');
const liveApps = require('../state/live-apps');
const AppClassification = require('../models/app-classification.model.js');
const { classifyApp } = require('../services/groq.service.js');

/**
 * Get port from environment and store in Express.
 */
var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */
var server = http.createServer(app);

/**
 * Create Socket.IO server.
 */
const io = new Server(server, {
  cors: {
    origin: "*",
    methods: ["GET", "POST"]
  }
});

/**
 * Socket.IO Authentication Middleware.
 */
io.use((socket, next) => {
  const token = socket.handshake.auth.token;
  if (!token) {
    return next(new Error('Authentication error: Token not provided'));
  }
  jwt.verify(token, process.env.JWT_SECRET, (err, decoded) => {
    if (err) {
      return next(new Error('Authentication error: Invalid token'));
    }
    socket.user = decoded.user;
    next();
  });
});

/**
 * Socket.IO Connection Handler.
 */
io.on('connection', (socket) => {
  console.log(`User connected: ${socket.user.email}`);

  // Listen for 'update-app' event from the client
  socket.on('update-app', async (data) => {
    try {
      if (data && data.appName) {
        const appName = data.appName;
        console.log(`User ${socket.user.email} is now using: ${appName}`);

        let classification = await AppClassification.get(appName);

        if (classification) {
          console.log(`Classification for '${appName}' found in DB: '${classification}'`);
        } else {
          console.log(`'${appName}' not found in DB. Classifying with Groq...`);
          classification = await classifyApp(appName);
          console.log(`Groq classified '${appName}' as: '${classification}'`);
          await AppClassification.save(appName, classification);
        }

        liveApps.set(socket.user.email, { appName, classification });
      }
    } catch (error) {
        console.error("[WebSocket Error] Failed to process 'update-app' event:", error);
    }
  });

  // Handle disconnection
  socket.on('disconnect', () => {
    console.log(`User disconnected: ${socket.user.email}`);
    liveApps.delete(socket.user.email);
  });
});

/**
 * Listen on provided port, on all network interfaces.
 */
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

// ... (The rest of the original file remains the same)

function normalizePort(val) {
  var port = parseInt(val, 10);
  if (isNaN(port)) { return val; }
  if (port >= 0) { return port; }
  return false;
}

function onError(error) {
  if (error.syscall !== 'listen') { throw error; }
  var bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
